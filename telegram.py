import telebot
import sqlite3
from telebot import types
import os


bot = telebot.TeleBot("6524296769:AAGRFxfadYnCs1A_3VqK8MKDD5zM_AOSbUA")
category = ""
val = 0


@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    db_name = f"Income_{user_id}.sql"
    path_to_file = r"C:\Users\–ù–∏–∫–∏—Ç–∞\Desktop\Project\\" + db_name
    if not os.path.exists(path_to_file):
        try:
            conn = sqlite3.connect(db_name)
            cur = conn.cursor()
            cur.execute(
                "CREATE TABLE IF NOT EXISTS income (category varchar(50) primary key, val int)"
            )
            conn.commit()
        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        finally:
            cur.close()
            conn.close()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(
        message.from_user.id,
        "–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥–∞—é –ª—é–¥—è–º –≤–µ—Å—Ç–∏ –¥–µ–Ω–µ–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã!",
        reply_markup=markup,
    )


@bot.message_handler(content_types=["text"])
def get_text_messages(message):
    user_id = message.from_user.id
    db_name = f"Income_{user_id}.sql"
    if message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è" or message.text == "–ù–∞—á–∞–ª–æ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—ã")
        btn2 = types.KeyboardButton("–í—ã–≤–µ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        btn3 = types.KeyboardButton("–í—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —Ç—Ä–∞—Ç –∑–∞ –º–µ—Å—è—Ü")
        btn4 = types.KeyboardButton("–û–±–Ω—É–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞")
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(
            message.from_user.id, "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ", reply_markup=markup
        )
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—ã":
        bot.send_message(
            message.from_user.id,
            "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç—Ä–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: –†–µ—Å—Ç–æ—Ä–∞–Ω 1000. (–ù–æ–º–∏–Ω–∞–ª –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å)",
            parse_mode="Markdown",
        )
        bot.register_next_step_handler(message, lambda msg: write_data(msg, db_name))
    elif message.text == "–í—ã–≤–µ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        conn = sqlite3.connect(db_name)
        cur = conn.cursor()
        cur.execute("SELECT category FROM income")
        categories = cur.fetchall()
        conn.close()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for category in categories:
            btn = types.KeyboardButton(category[0])
            markup.add(btn)
        btn_back = types.KeyboardButton("–ù–∞—á–∞–ª–æ")
        markup.add(btn_back)
        bot.send_message(
            message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup
        )
        bot.register_next_step_handler(
            message, lambda msg: handle_category(msg, db_name)
        )
    elif message.text == "–í—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —Ç—Ä–∞—Ç –∑–∞ –º–µ—Å—è—Ü":
        cash = 0
        conn = sqlite3.connect(db_name)
        cur = conn.cursor()
        all_in = """–ö–∞—Ç–µ–≥–æ—Ä–∏—è –°—É–º–º–∞\n"""
        for cat, val in cur.execute("SELECT * FROM income"):
            all_in += cat + " " + str(val) + "—Ä—É–±.\n"
            cash += val
        all_in += "\n–û–±—â–∞—è—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç " + str(cash) + " —Ä—É–±."
        bot.send_message(message.from_user.id, all_in)
        conn.commit()
        cur.close()
        conn.close()
    elif message.text == "–û–±–Ω—É–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞":
        conn = sqlite3.connect(db_name)
        cash = 0
        cur = conn.cursor()
        cur.execute("DELETE FROM income")
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(message.from_user.id, "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")


def write_data(message, db_name):
    global category
    user_id = message.from_user.id
    db_name = f"Income_{user_id}.sql"
    global value
    splt_string = message.text.split()
    category = splt_string[0]
    try:
        value = int(splt_string[1])
        conn = sqlite3.connect(db_name)
        cur = conn.cursor()
        info = cur.execute(
            "SELECT * FROM income WHERE category=?", (category,)
        ).fetchall()
        if len(info) == 0:
            cur.execute(
                "INSERT INTO income (category, val) VALUES (?, ?)", (category, value)
            )
            bot.send_message(message.from_user.id, "–Ø –¥–æ–±–∞–≤–∏–ª —Ç—Ä–∞—Ç—É")
        else:
            cur.execute("SELECT val FROM income WHERE category= ?", (category,))
            old_value = cur.fetchone()[0]
            summ = int(old_value) + value
            cur.execute("UPDATE income SET val= ? WHERE category= ?", (summ, category))
            bot.send_message(
                message.from_user.id, "–í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
            )
        conn.commit()
        cur.close()
        conn.close()
    except ValueError:
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–∏—Å–∞–Ω–Ω–∏–∏ —Å—É–º–º—ã —Ç—Ä–∞—Ç—ã")


def handle_category(message, db_name):
    if message.text == "–ù–∞—á–∞–ª–æ":
        bot.register_next_step_handler(message, get_text_messages)
    else:
        user_id = message.from_user.id
        db_name = f"Income_{user_id}.sql"
        selected_category = message.text
        conn = sqlite3.connect(db_name)
        cur = conn.cursor()
        cur.execute(
            "SELECT SUM(val) FROM income WHERE category = ?", (selected_category,)
        )
        total_expenses = cur.fetchone()[0]
        conn.close()
        bot.send_message(
            message.from_user.id,
            f"–í–æ—Ç —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n| –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –°—É–º–º–∞ |\n{'-' * 35}\n| {selected_category}  | {str(total_expenses) + '—Ä—É–±.'} |",
            parse_mode="Markdown",
        )


bot.polling(none_stop=True, interval=0, timeout=600)
